/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct V3d {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_V3d() {
    assert_eq!(
        ::std::mem::size_of::<V3d>(),
        24usize,
        concat!("Size of: ", stringify!(V3d))
    );
    assert_eq!(
        ::std::mem::align_of::<V3d>(),
        8usize,
        concat!("Alignment of ", stringify!(V3d))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<V3d>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(V3d), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<V3d>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(V3d), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<V3d>())).z as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(V3d), "::", stringify!(z))
    );
}
extern "C" {
    pub fn v3d_create(x: f64, y: f64, z: f64) -> V3d;
}
extern "C" {
    pub fn v3d_add_a(a: V3d, b: V3d) -> V3d;
}
extern "C" {
    pub fn v3d_add_b(a: V3d, b: V3d) -> V3d;
}
